package main

import (
	"log"
	"strconv"
)

// Temperature Humidity Light Node
type ThlNode struct {
	Node

	// sensors
	Temperature float32
	Humidity    uint8
	Light       uint8
	LowBattery  bool
}

// Example of line generated by RF12Demo sketch that received a packet from a thlNode:
//
//       OK 3 03 184 100 210 0
//          ^ -------------
//     header      ^
//             data bytes
//
//
// thlNode payload structure:
//
//      struct {
//        byte light;     // light sensor: 0..255
//        byte lobat :1;  // supply voltage dropped under 3.1V: 0..1
//        byte humi  :7;  // humidity: 0..100
//        int  temp  :10; // temperature: -512..+512 (tenths)
//      } payload;
//
//
// data bytes decoding:
//
//             184 => 1 0 1 1 1 0 0 0
//             100 => 0 1 1 0 0 1 0 0
//             210 => 1 1 0 1 0 0 1 0
//               0 => 0 0 0 0 0 0 0 0
//
//             light: 1 0 1 1 1 0 0 0 => 184 * 100 / 255 = 72
//       low battery:               0 => true
//          humidity: 0 1 1 0 0 1 0   => 50
//       temperature: 1 1 0 1 0 0 1 0
//                                0 0 => 210 / 10 = 21.0
//        <not used>: 0 0 0 0 0 0
//
func (node *ThlNode) handleData(data []byte) {
	if len(data) == 4 {
		var temperature int = ((256 * (int(data[3]) & 3)) + int(data[2]))
		if temperature > 512 {
			// negative value
			temperature = temperature - 1024
		}

		node.Light = uint8((int(data[0]) * 100) / 255)
		node.LowBattery = ((data[1] & 1) == 1)
		node.Humidity = data[1] >> 1
		node.Temperature = float32(temperature) / 10
	}
}

func (node *ThlNode) dumpData() {
	log.Printf(node.textData())
}

func (node *ThlNode) textData() string {
	result := ""

	result += node.Name + ":"
	result += "\n  Temperature: " + strconv.FormatFloat(float64(node.Temperature), 'f', 1, 64)
	result += "\n  Humidity: " + strconv.Itoa(int(node.Humidity))
	result += "\n  Light: " + strconv.Itoa(int(node.Light))
	result += "\n  LowBattery: " + strconv.FormatBool(node.LowBattery)
	result += "\n\n"

	return result
}
