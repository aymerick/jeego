package main

import (
	"errors"
	"log"
	"os"
	"runtime"
	"strconv"
	"strings"
)

func main() {
	log.SetOutput(os.Stderr)

	log.Printf("Jeego - Target OS/Arch: %s %s", runtime.GOOS, runtime.GOARCH)
	log.Printf("Built with Go Version: %s", runtime.Version())

	// load config
	config, err := loadConfig()
	if err != nil {
		log.Panic(err)
	}

	log.Printf("Jeego config: %+v", config)

	// init database
	database, err := loadDatabase()
	if err != nil {
		log.Panic(err)
	}

	log.Printf("Jeego database loaded")

	// @todo A better web service
	// launch web server
	// go runWebServer(database)

	// @todo Goify serial reader
	// serial reader
	sr := NewSerialReader(config.SerialPort, config.SerialBaud)

	log.Printf("Reading on serial port: %+v", config.SerialPort)

	// loop forever
	for {
		// read a line and trim it
		line := strings.Trim(sr.readLine(), " \n\r")
		if line != "" {
			if config.Debug {
				log.Printf("Received: %s", line)
			}

			// parse node infos and data
			nodeId, nodeKind, data, err := parseLine(line)
			if err == nil {
				// @todo log raw data to file

				// get node
				node := database.nodeForId(nodeId)
				if node == nil {
					log.Printf("Adding new node: %v", nodeId)

					// insert new node in database
					node = database.insertNode(nodeId, nodeKind)
				}

				// handle data
				node.handleData(data)

				// debug
				if config.Debug {
					log.Printf(node.textData())
				}

				// update database
				database.updateNode(node)

				// @todo Save node 'status update' to database ?

				// push to domoticz
				go pushToDomoticz(config, node)
			}
		}
	}
}

// Parse a line received from central node
//
// Example of line generated by RF12Demo sketch that received a packet from a jeeRoomNode:
//
//       OK 2 3 156 149 213 0
//          ^ ^ -------------
//     header |      ^
//            |  data bytes
//            |
//         node kind
//
// header:
//
//      0   0   0   0   0   0   1   0
//      ^   ^   ^   -----------------
//     CTL DST ACK         ^
//                    node id => 2
//
// node kind:
//
//      0   0   0   0   0   0   1   1
//      ^   -------------------------
// reserved            ^
//               node kind => 3
func parseLine(line string) (nodeId int, nodeKind int, data []byte, err error) {
	// split line
	dataStrArray := strings.Split(line, " ")

	// parse status
	if (len(dataStrArray) > 3) && (dataStrArray[0] == "OK") {
		// parse node id
		nodeId = int(byteFromString(dataStrArray[1]) & 0x1f)

		// parse node infos
		nodeInfosByte := byteFromString(dataStrArray[2])

		// check reserved field
		if (nodeInfosByte & 0x80) != 0 {
			log.Printf("Received payload with reserved field set to 1")
		} else {
			// parse node kind
			nodeKind = int(nodeInfosByte & 0x7f)

			// parse data
			data = make([]byte, len(dataStrArray)-3)

			for index, dataStr := range dataStrArray {
				if index > 2 {
					data[index-3] = byteFromString(dataStr)
				}
			}
		}
	} else {
		err = errors.New("Garbage received")
	}

	return
}

// helper
func byteFromString(val string) byte {
	i, err := strconv.ParseUint(val, 10, 8)
	if err != nil {
		log.Panic(err)
	}

	return byte(i)
}
