package main

import (
	"log"
	"strconv"
)

// Standard room node from jeelabs
type RoomNode struct {
	Node

	// sensors
	Temperature float32
	Humidity    uint8
	Light       uint8
	Motion      bool
	LowBattery  bool
}

// Example of line generated by RF12Demo sketch that received a packet from a standard roomNode:
//
//       OK 2 156 149 213 0
//          ^ -------------
//     header      ^
//             data bytes
//
//
// roomNode payload structure:
//
//     struct {
//         byte light;     // light sensor: 0..255
//         byte moved :1;  // motion detector: 0..1
//         byte humi  :7;  // humidity: 0..100
//         int temp   :10; // temperature: -500..+500 (tenths)
//         byte lobat :1;  // supply voltage dropped under 3.1V: 0..1
//     } payload;
//
//
// data bytes decoding:
//
//             156 => 1 0 0 1 1 1 0 0
//             149 => 1 0 0 1 0 1 0 1
//             213 => 1 1 0 1 0 1 0 1
//               0 => 0 0 0 0 0 0 0 0
//
//             light: 1 0 0 1 1 1 0 0 => 156 * 100 / 255 = 61
//             moved:               1 => true
//          humidity: 1 0 0 1 0 1 0   => 74
//       temperature: 1 1 0 1 0 1 0 1 => 213 / 10 = 21.3
//                                0 0
//       low battery:           0     => false
//        <not used>: 0 0 0 0 0
//
// References:
//   - http://jeelabs.org/2011/06/09/rf12-packet-format-and-design/
//   - http://jeelabs.org/2011/01/14/nodes-addresses-and-interference/
//   - http://jeelabs.org/2010/12/07/binary-packet-decoding/
//   - http://jeelabs.org/2010/12/08/binary-packet-decoding-â€“-part-2/
//   - http://jeelabs.org/2013/09/05/decoding-bit-fields/
//   - http://jeelabs.org/2013/09/06/decoding-bit-fields-part-2/
//
func (node *RoomNode) handleData(data []byte) {
	if len(data) == 4 {
		var temperature int = ((256 * (int(data[3]) & 3)) + int(data[2]))
		if temperature > 512 {
			// negative value
			temperature = temperature - 1024
		}

		node.Light = uint8((int(data[0]) * 100) / 255)
		node.Motion = ((data[1] & 1) == 1)
		node.Humidity = data[1] >> 1
		node.Temperature = float32(temperature) / 10
		node.LowBattery = (((data[3] >> 2) & 1) == 1)
	}
}

func (node *RoomNode) dumpData() {
	log.Printf(node.textData())
}

func (node *RoomNode) textData() string {
	result := ""

	result += node.Name + ":"
	result += "\n  Temperature: " + strconv.FormatFloat(float64(node.Temperature), 'f', 1, 64)
	result += "\n  Humidity: " + strconv.Itoa(int(node.Humidity))
	result += "\n  Light: " + strconv.Itoa(int(node.Light))
	result += "\n  Motion: " + strconv.FormatBool(node.Motion)
	result += "\n  LowBattery: " + strconv.FormatBool(node.LowBattery)
	result += "\n\n"

	return result
}
